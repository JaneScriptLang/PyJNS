#include <_os>


_os_time = __TIMEREP()

structure TimeDate:
    fn __init__(this, year, month, day, hour, minute, second, millisecond):
        this.year = year
        this.month = month
        this.day = day
        this.hour = hour
        this.minute = minute
        this.second = second
        this.millisecond = millisecond
    
    @classmethod
    fn fromUnixTime(cls, time: int):
        obj = datetime.datetime.fromtimestamp(int(time))
        return cls(obj.year, obj.month, obj.day, obj.hour,obj.minute,obj.second, obj.second*1000)

    fn toUnixTime(this):
        num = 0#this.millisecond
        num += this.second*1000
        num += this.minute*60*1000
        num += this.hour*60*60*1000
        num += this.day*24*60*60*1000
        num += this.month*_getMonthLength(this.month,this.year)*24*60*60*1000
        num += this.year*12*_getMonthLength(this.month,this.year)*24*60*60*1000
        return num

    @classmethod
    fn now(cls):
        timeNow = _os_time.time()
        return cls.fromUnixTime(timeNow)

fn _getMonthLength(n, y=-1):
    if n in [1,3,5,7,8,10,12]:
        return 31
    elif n == 2:
        if y%4 == 0:
            return 29
        return 28
    else: return 30