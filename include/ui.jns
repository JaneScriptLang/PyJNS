from native reference sdl2;
#include <stdlib>

structure Graphics{
    fn __init__(this, title: str = None, width: int = 800, height: int = 600, bgcolor = (0,0,0,255)){
        this.title = title.encode() if title else b"UI - SDL2 - JNS R3";
        this.width = width;
        this.height = height;
        this.bgcolor = bgcolor;  
        sdl2.SDL_Init(sdl2.SDL_INIT_EVERYTHING);
        this.sdl = sdl2.SDL_CreateWindow(this.title, sdl2.SDL_WINDOWPOS_CENTERED, sdl2.SDL_WINDOWPOS_CENTERED, this.width, this.height, sdl2.SDL_WINDOW_SHOWN);
        this.renderer = sdl2.SDL_CreateRenderer(this.sdl, -1, 0);
        this.running = True;

        this.dt = 1.0 / 60.0;

        this.update_dt = 0;
        this.update_handlers = [];
        this.draw_handlers = [];
    }

    fn onupdate(this, updfn){
        this.update_handlers.append(updfn);
        return updfn;
    }

    fn draw(this, drfn){
        this.draw_handlers.append(drfn);
        return drfn;
    }

    fn _update(this, dt){
        this.update_dt += dt;
        while(this.update_dt > this.dt){
            for u=0 until end(this.update_handlers) step 1{
                this.update_handlers[u](this.dt);
            }
            this.update_dt -= this.dt;
        }
    }

    fn _draw(this){
        for d=0 until end(this.draw_handlers) step 1{
            this.draw_handlers[d]();
        }
        
    }

    fn loop(this){
        sdl2.SDL_ShowWindow(this.sdl);

        event = sdl2.SDL_Event();

        current = sdl2.SDL_GetPerformanceCounter();
        freq = sdl2.SDL_GetPerformanceFrequency();

        while(this.running){
            if(sdl2.SDL_PollEvent(event) != 0){
                if(event.type == sdl2.SDL_QUIT){
                    this.running = False;
                }
                if(event.type == sdl2.SDL_KEYDOWN){
                    if(event.key.keysym.sym == sdl2.SDLK_ESCAPE){
                        this.running = False;
                    }
                }
            }
            new = = sdl2.SDL_GetPerformanceCounter();

            this._update((new-current) / freq);
            sdl2.SDL_RenderClear(this.renderer);
            this._draw();
            sdl2.SDL_SetRenderDrawColor(this.renderer, *this.bgcolor);
            sdl2.SDL_RenderPresent(this.renderer);
        }
        sdl2.SDL_DestroyRenderer(this.renderer);
        sdl2.SDL_DestroyWindow(this.sdl);
        sdl2.SDL_Quit();
    }

}
