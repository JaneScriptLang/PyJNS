structure IterLike:
    fn __init__(this, initial_values):
        this.vals = initial_values

    fn add(this, *vals):
        this.vals.extend(vals)

    fn find(this, callable, item, *, default=None):
        for anything in this:
            if callable(anything): return anything
        return default

    fn __iter__(this):
        return this.vals

structure DottedDict:
    """
        Alternative to default :class: dict with dot notation

        >>> #include <structs>
        >>> d1 = {"Hello":"World"}
        >>> d2 = DottedDict(d1)
        >>> d2.Hello
        "World"
        >>> d2["Hello"]
        "World"
        >>> d2.get("Hello")
        "World"
    """
    __getattr__ = dict.get
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__